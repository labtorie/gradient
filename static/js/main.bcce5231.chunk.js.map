{"version":3,"sources":["styles.module.css","App.js","reportWebVitals.js","index.js"],"names":["module","exports","mixColors","color1","color2","rgbToHex","rgb","hex","Number","toString","length","_colorString1","replace","_colorString2","_color1","slice","_color2","newColor","map","channel","index","Math","min","max","round","parseInt","join","App","useState","inputColors","setInputColors","steps","setSteps","gradient","setGradient","insert","array","value","getColorChangeHandler","color","c","prev","copy","generate","step","colorsArray","newColors","insertions","reduce","obj","current","Object","keys","useEffect","className","styles","screen","controls","slider","onChangeComplete","onChange","e","target","type","onClick","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcce5231.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"styles_controls__D3bDD\",\"screen\":\"styles_screen__2I3eW\",\"color\":\"styles_color__3V4cu\",\"gradient\":\"styles_gradient__2DX3d\",\"slider\":\"styles_slider__u0Gzs\"};","import React, {useEffect, useState} from 'react'\nimport styles from './styles.module.css'\nimport { SliderPicker } from 'react-color';\n\nconst mixColors = (color1 = '#ffffff', color2 = '#000000') => {\n\n  const rgbToHex = function (rgb) {\n    let hex = Number(rgb).toString(16);\n    if (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n    return hex;\n  };\n\n  const _colorString1 = color1.replace('#', '')\n  const _colorString2 = color2.replace('#', '')\n  const _color1 = [_colorString1.slice(0, 2), _colorString1.slice(2,4), _colorString1.slice(4,6)]\n  const _color2 = [_colorString2.slice(0, 2), _colorString2.slice(2,4), _colorString2.slice(4,6)]\n\n  const newColor = _color1.map(\n      (channel, index)=> {\n        return Math.min(255,\n            Math.max(0,\n                Math.round((parseInt(channel, 16) + parseInt(_color2[index], 16)) / 2)))\n      })\n\n  return ('#'+newColor.map(channel => rgbToHex(channel)).join(''))\n}\n\n\nfunction App() {\n\n  const [inputColors, setInputColors] = useState(['#ff0033', '#0000ff'])\n  const [steps, setSteps] = useState(5)\n\n  const [gradient, setGradient] = useState(inputColors)\n\n  const insert = (array, index, value) => {\n    return [...array.slice(0, index), value, ...array.slice(index)]\n  }\n\n  const getColorChangeHandler = (color) => (c) => {\n    setInputColors(prev=>{\n      const copy = [...prev]\n      copy[color] = c.hex\n      return copy\n    })\n  }\n\n  const generate = () => {\n    let step = 0\n    let colorsArray = [...inputColors]\n    let newColors = []\n    let insertions = {}\n    while (step < steps) {\n      insertions = colorsArray.reduce((obj, current, index, {length})=>{\n        if (index === length - 1) return obj\n        return {\n          ...obj,\n          [index+1+Object.keys(obj).length]: mixColors(current, colorsArray[index+1])\n        }\n      }, {})\n\n      newColors = [...colorsArray]\n\n      for (let index in insertions) {\n        if (index)\n        newColors = insert(newColors, +index, insertions[index])\n      }\n      colorsArray = [...newColors]\n      step++\n    }\n    setGradient(colorsArray)\n  }\n\n  useEffect(()=>{generate()}, [])\n\n  return <div className={styles.screen}>\n    <div className={styles.controls}>\n      <div className={styles.slider}><SliderPicker color={inputColors[0]}\n                       onChangeComplete={getColorChangeHandler(0)}\n      /></div>\n      <div className={styles.slider}><SliderPicker color={inputColors[1]}\n                       onChangeComplete={getColorChangeHandler(1)}\n      /></div>\n      <span>Steps</span>\n      <input max={'10'} value={`${steps}`} onChange={(e)=>setSteps(parseInt(e.target.value))} type={'number'}/>\n      <button onClick={generate}>Generate</button>\n    </div>\n    <div className={styles.gradient}>\n      {gradient.map((color, index)=><div className={styles.color} key={color+index} style={{backgroundColor: color}}/>)}\n    </div>\n  </div>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}